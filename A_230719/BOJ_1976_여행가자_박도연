import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;

public class Main {
	static int N,M;
	static boolean[] visited;
	static ArrayList<ArrayList<Integer>> list;
	
	public static void main(String[] args) throws Exception{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		M = Integer.parseInt(br.readLine());
		
		visited = new boolean[N+1];
		list = new ArrayList<>();
		for(int i = 0; i <= N; i++)
			list.add(new ArrayList<>());
		
		for(int i = 0; i < N; i++) {
			String[] sArr = br.readLine().split(" ");
			for(int j = 0; j < N; j++) {
				int node = Integer.parseInt(sArr[j]);
				if(node==1) {
					list.get(i+1).add(j+1);
					list.get(j+1).add(i+1);
				}
			}
		}
		
		boolean flag = true;
		String[] sArr = br.readLine().split(" ");
		for(int i = 0; i < M - 1; i++) {
			visited = new boolean[N+1];
			int n1 = Integer.parseInt(sArr[i]);
			int n2 = Integer.parseInt(sArr[i+1]);
			
			boolean tORf = bfs(n1,n2);
			
			if(!tORf) {
				flag = false;
				System.out.println("NO");
				break;
			}
		}
		
		if(flag)
			System.out.println("YES");
	}
	
	private static boolean bfs(int n1, int n2) {
		Queue<Integer> queue = new LinkedList<>();
		queue.offer(n1);
		visited[n1] = true;
		boolean flag = false;
		
		while(!queue.isEmpty()) {
			int curNode = queue.poll();
			if(curNode==n2) {
				flag = true;
				break;
			}
			for(int i = 0; i < list.get(curNode).size(); i++) {
				int nextNode = list.get(curNode).get(i);
				if(!visited[nextNode]) {
					visited[nextNode] = true;
					queue.offer(nextNode);
				}
			}
		}
		
		if(flag)
			return true;
		else
			return false;
	}
}
