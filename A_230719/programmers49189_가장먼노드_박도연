import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

public class Solution {
	public static void main(String[] args) {
		int answer = new Solution().solution(6, new int[][]{{3,6},{4,3},{3,2},{1,3},{1,2},{2,4},{5,2}});
		System.out.println(answer);
	}
	public int solution(int n, int[][] edge) {
        int answer = 0;
        ArrayList<ArrayList<Integer>> list = new ArrayList<>();
        
        for(int i = 0; i <= n; i++){
        	list.add(new ArrayList<>());
        }
        
        for(int i = 0; i < edge.length; i++){
        	int n1 = edge[i][0];
        	int n2 = edge[i][1];
        	
        	list.get(n1).add(n2);
        	list.get(n2).add(n1);
        }
        
        int[] distance = new int[n+1];
        boolean[] visited = new boolean[n+1];
        int max = Integer.MIN_VALUE;
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(1);
        visited[1] = true;
        
        while(!queue.isEmpty()){
        	int curNode = queue.poll();
        	
        	for(int i = 0; i < list.get(curNode).size(); i++){
        		int nextNode = list.get(curNode).get(i);
        		if(!visited[nextNode]){
        			distance[nextNode] = distance[curNode] + 1;
        			visited[nextNode] = true;
        			max = Math.max(max, distance[nextNode]);
        			queue.offer(nextNode);
        		}
        	}
        }
        
        int cnt = 0;
        for(int i = 2; i <= n; i++){
        	if(distance[i]==max)
        		cnt++;
        }
        
        answer = cnt;
        return answer;
    }
}
